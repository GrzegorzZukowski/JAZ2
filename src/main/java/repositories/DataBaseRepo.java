package repositories;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import domain.Privilege;
import domain.User;

public class DataBaseRepo implements UserRepoInterface {

	private Connection connection;
	
	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	
	private String insertUserSql = "INSERT INTO User (username, password, email, privilege) VALUES (?, ?, ?, ?)";
	private String selectUserSql = "SELECT * FROM User WHERE username=? AND password=?";
	private String getAllUsersSql = "SELECT * FROM User";
	private String getUserEmailSql = "SELECT email FROM User WHERE username=?";
	private String getUserPrivilegeSql = "SELECT privilege FROM User WHERE username=?";
	private String insertPrivilegeSql = "UPDATE User SET(privilege) = (?) WHERE username=?";
	
	private PreparedStatement addUserStatement;
	private PreparedStatement selectUserStatement;
	private PreparedStatement getAllUsersStatement;
	private PreparedStatement getUserEmailStatement;
	private PreparedStatement getUserPrivilegeStatement;
	private PreparedStatement insertPrivilegeStatement;
	
	private String createTableUser = ""
			+ "CREATE TABLE IF NOT EXISTS User("
			+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
			+ "username varchar(40), "
			+ "password varchar(45), "
			+ "email varchar(40), "
			+ "privilege varchar(7)"
			+ ")";
	
	private Statement statement;
	
	public DataBaseRepo() {
		try {
				connection = DriverManager.getConnection(url);
				
				statement = connection.createStatement();
				
				ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
				boolean tableExists = false;
				
				while(rs.next()) {
					if ("User".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
						tableExists = true;
						break;
					}
				}
				
				statement.executeUpdate(createTableUser);
				
				if(!tableExists) {
					User user1 = new User();
					user1.setUsername("Grzegorz");
					user1.setPassword("456");
					user1.setEmail("grzegorzzukowski@gmail.com");
					user1.setPrivilege(Privilege.ADMIN);
					
					User user2 = new User();
					user2.setUsername("Marian");
					user2.setPassword("456");
					user2.setEmail("marian.piekny@gmail.com");
					user2.setPrivilege(Privilege.NORMAL);
					
					User user3 = new User();
					user3.setUsername("Seba");
					user3.setPassword("456");
					user3.setEmail("sebatumolec@gmail.com");
					user3.setPrivilege(Privilege.PREMIUM);
					
					add(user1);
					add(user2);
					add(user3);
				}
				
				addUserStatement = connection.prepareStatement(insertUserSql);
				selectUserStatement = connection.prepareStatement(selectUserSql);
				getAllUsersStatement = connection.prepareStatement(getAllUsersSql);
				getUserEmailStatement = connection.prepareStatement(getUserEmailSql);
				getUserPrivilegeStatement = connection.prepareStatement(getUserPrivilegeSql);
				insertPrivilegeStatement = connection.prepareStatement(insertPrivilegeSql);
				
		} catch (SQLException e){
			e.printStackTrace();
		}
	}
		
	public Connection getConnection() {
		return connection;
	}
	
	
	public void add (User user) {

		try {
			addUserStatement.setString(1, user.getUsername());
			addUserStatement.setString(2, user.getPassword());
			addUserStatement.setString(3, user.getEmail());
			addUserStatement.setString(4, user.getPrivilege().toString());
			
			addUserStatement.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public boolean login(User user) {
		
		try {
			selectUserStatement.setString(1, user.getUsername());
			selectUserStatement.setString(2, user.getPassword());
			ResultSet rs = selectUserStatement.executeQuery();
			rs.next();

			if (rs.getString("username").equals(user.getUsername())) {
				return true;
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return false;
	}
	
	public List<User> getAllUsers() {
		
		List<User> users = new ArrayList<User>();

		try {
			ResultSet rs = getAllUsersStatement.executeQuery();

			while (rs.next()) {
				User user = new User();
				user.setUsername(rs.getString("username"));
				user.setPassword(rs.getString("password"));
				user.setEmail(rs.getString("email"));
				user.setPrivilege(Privilege.valueOf(rs.getString("privilege")));

				users.add(user);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return users;
	}
	
	public String getEmail(User user) {
		
		try {
			getUserEmailStatement.setString(1, user.getUsername());
			ResultSet rs = getUserEmailStatement.executeQuery();
			
			rs.next();
			
			return rs.getString("email");
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
	public String getPrivilege(User user) {
		
		try {
			getUserPrivilegeStatement.setString(1, user.getUsername());
			ResultSet rs = getUserPrivilegeStatement.executeQuery();
			
			rs.next();
			
			return rs.getString("privilege");
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
	public void grantPremium (User user) {
		
		try {
			insertPrivilegeStatement.setString(1, Privilege.PREMIUM.toString());
			insertPrivilegeStatement.setString(2, user.getUsername());
			insertPrivilegeStatement.executeQuery();	
		
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void revokePremium (User user) {
		try {
			insertPrivilegeStatement.setString(1, Privilege.NORMAL.toString());
			insertPrivilegeStatement.setString(2, user.getUsername());
			insertPrivilegeStatement.executeQuery();	
		
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
}